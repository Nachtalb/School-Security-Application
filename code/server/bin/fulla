#!/usr/bin/env perl
use v5.22;
use warnings;

use IO::Socket::INET;

use Log::Log4perl qw(:easy);
use DBI;

use Proc::Daemon;

use Fulla::Werchzueg;
use Fulla::CommandDispatcher;

# Deamonise process
my $daemon = Proc::Daemon->new( work_dir     => "$ENV{PWD}",
                                pid_file     => "fulla.pid",
                                child_STDOUT => 'fulla.stdout',
                                child_STDERR => 'fulla.stderr',
                              );
$daemon->Init();

# setting up Logger
Log::Log4perl->easy_init({ level  => $DEBUG,
                           layout => '%d %F{1} (%L) -> %m%n',
                           file   => "$ENV{PWD}/fulla.log",
                        });
my $log = Log::Log4perl->get_logger();

# we have a daemon and a logger, I think we can say that we have started :-)
$log->info('starting server');

# log process id
my ($pid, $pid_file) = $daemon->get_pid();
$log->info('process id '      . $pid);
$log->info('process id file ' . $pid_file);

# this variable controls the main loop of the daemon process
my $continue = 1;

# log and end on ctrl+c signal
$SIG{'INT'} = sub { $log->info('ctrl+c pressed') if $log; $continue = 0};
$SIG{TERM}  = sub { $log->info('I got killed')   if $log; $continue = 0 };

# setting up DB connection
my $dbh = DBI->connect( 'DBI:mysql:database=fulla;host=localhost;',
                        'root',
                        'gibbiX12345',
                      );
if ($dbh) {
    $log->info('db connection established');
}
else {
    $log->fatal($DBI::errstr);
    die ($DBI::errstr);
}
$dbh->do('set names utf8');

# register db and logger globally (singleton pattern)
Fulla::Werchzueg->set_database($dbh);
Fulla::Werchzueg->set_logger  ($log);

# initialise object for parsing and dispatching incoming commands
my $you = Fulla::CommandDispatcher->new();

# configure "auto-flush": no buffering in print to console
$| = 1;
 
# creating a listening socket
my $socket = new IO::Socket::INET (
    LocalAddr     => '0.0.0.0',     # local server address
    LocalPort     => '7777',        # local server port
    Listen        => 5,             # queue size for connections
    Proto         => 'tcp',         # protocol used
);
die "cannot create socket $!\n" unless $socket;
$log->fatal("cannot create socket $!") unless $socket;
$log->info('server waiting for client connection on port 7777');

# endless loop, looking for client requests
while($continue)
{
    # waiting for a new client connection
    my $client_socket = $socket->accept() or die "socket accept failed $!";
 
    # get information about a newly connected client
    my $client_address = $client_socket->peerhost();
    my $client_port    = $client_socket->peerport();
    $log->info("connection from $client_address:$client_port");
 
    # read up to 1024 characters from the connected client
    my $client_data = '';
    sysread( $client_socket, $client_data, 1024);
    $log->info("received data: $client_data");

    # do whatever needs to be done
    my $answer = $you->do($client_data);
    $log->debug("answer: $answer");

    # write response data to the connected client
    print $client_socket $answer;
 
    # notify client that response has been sent
    shutdown($client_socket, 1);

    $log->info("request from $client_address:$client_port answered");
}
 
# clean up your room!
END {
    $log->info('Byebye: closing socket') if $log;
    $socket->close()                     if $socket;
}

# Some helpfull links on how to write a TCP application #
#########################################################
# http://xmodulo.com/how-to-write-simple-tcp-server-and-client-in-perl.html
# https://metacpan.org/pod/IO::Socket::INET
# https://metacpan.org/pod/IO::Socket::SSL

__END__

=encoding UTF-8

=head1 NAME

B<fulla> - executable to start the C<Fulla> server.

This module is part of the C<Fulla> project.

=head1 SYNOPSIS

To start the server in the terminal, just type

 fulla

If you want to save some logs, you can redirect C<stdin> and C<stdout>

 fulla &> fulla_logs_$(date +%F).log

=head1 LIBRARY

All additional server code can be found under the perl namespace C<Fulla>.

=head1 AUTHOR

© Boris Däppen, Biel, 2017
